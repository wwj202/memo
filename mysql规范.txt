
一、命名规范

1 、库名、表名、字段名必须使用小写字母并采用下划线分割；

2 、库名、表名、字段名支持最多 32 个字符，统一规范、易于辨识以及减少传输量不要超过 32 ；

3 、库名、表名、字段名禁止使用 MySQL 保留关键字；

4 、临时库、临时表名必须以 tmp 为前缀并以日期为后缀；

5 、备份库、备份表名必须以 bak 为前缀并以日期为后缀；

 

二、基本规范

1 、使用 INNODB 存储引擎

5.5 以后的默认引擘，支持事务，行级锁，更好的恢复性，高并发下性能更好，对多核，大内存， ssd 等硬件支持更好；

2 、表字符集使用 UTF8

使用 utf8 字符集，如果是汉字，占 3 个字节，但 ASCII 码字符还是 1 个字节；统一，不会有转换产生乱码风险；

3 、所有表都需要添加注释，单表数据量建议控制在 500 万以内；

4 、不在数据库中存储图片、文件等大数据；

5 、禁止在线上做数据库压力测试；

6 、禁止从测试、开发环境直连线上数据库；

 

三、库表设计规范

1 、禁止使用分区表

MySQL 的分区表实际性能不是很好，且管理维护成本较高

2 、拆分大字段和访问频率低的字段，分离冷热数据

3 、采用合理的分库分表策略，推荐使用 HASH 进行分表，表名后缀使用十进制数，下标从 0 开始

首次分表尽量多的分，避免二次分表，二次分表的难度和成本较高

4 、按日期时间分表需符合 YYYY[MM][DD][HH] 格式

5 、单表字段数控制在 20 个以内
6 、一条完整的建表语句中应包含必要的字段、主键、合理的索引（综合代码中所有的条件语句创建合理的索引）

 

四、索引设计规范

索引是一把双刃剑，它可以提高查询效率但也会降低插入和更新的速度并占用磁盘空间

1 、单张表中索引数量不超过 5 个；

2 、单个索引中的字段数不超过 5 个；

对字符串使用前缀索引，前缀索引长度不超过 10 个字符；如果有一个 CHAR(200) 列，如果在前 10 个字符内，多数值是惟一的，那么就不要对整个列进行索引。对前 10 个字符进行索引能够节省大量索引空间，也可能会使查询更快；

3 、表必须有主键，不使用 UUID 、 MD5 、 HASH 作为主键，尽量不选择字符串列作为主键；主键建议选择自增 id ；

4 、创建复合索引时区分度较大的字段放在最前面；不在低区分度的字段上创建索引，例如‘性别‘；

5 、避免冗余或重复索引

合理创建联合索引（避免冗余）， index(a,b,c) 相当于 index(a) 、 index(a,b) 、 index(a,b,c) ；

6 、索引不是越多越好，按实际需要进行创建

每个额外的索引都要占用额外的磁盘空间，并降低写操作的性能

7 、不在索引列进行数学运算和函数运算；

8 、尽量不要使用外键

外键用来保护参照完整性，可在业务端实现，对父表和子表的操作会相互影响，降低可用性；

9 、不使用 % 前导的查询，如 like “ %xxx ”，无法使用索引；

10 、不使用反向查询，如 not in / not like

无法使用索引，导致全表扫描

全表扫描导致 buffer pool 利用降低

 

五、字段设计规范

1 、尽可能不要使用 TEXT 、 BLOB 类型

删除这种值会在数据表中留下很大的 " 空洞 " ，可以考虑把 BLOB 或 TEXT 列分离到单独的表中

2 、用 DECIMAL 代替 FLOAT 和 DOUBLE 存储精确浮点数

浮点数相对于定点数的优点是在长度一定的情况下，浮点数能够表示更大的数据范围；浮点数的缺点是会引起精度问题

3 、将字符转化为数字

4 、使用 TINYINT 来代替 ENUM 类型

5 、字段长度尽量按实际需要进行分配，不要随意分配一个很大的容量

VARCHAR(N) ， N 表示的是字符数不是字节数，比如 VARCHAR(255) ，可以最大可存储 255 个汉字，需要根据实际的宽度来选择 N ；

VARCHAR(N) ， N 尽可能小，因为 MySQL 一个表中所有的 VARCHAR 字段最大长度是 65535 个字节，进行排序和创建临时表一类的内存操作时，会使用 N 的长度申请内存；

6 、如果可能的话所有字段均定义为 not null

7 、使用 UNSIGNED 存储非负整数

同样的字节数，存储的数值范围更大。如 tinyint 有符号为 -128-127 ，无符号为 0-255

8 、使用 TIMESTAMP 存储时间 . 因为 TIMESTAMP 使用 4 字节， DATETIME 使用 8 个字节 , 同时 TIMESTAMP 具有自动赋值以及自动更新的特性 .

9 、使用 INT UNSIGNED 存储 IPV4

10 、使用 VARBINARY 存储大小写敏感的变长字符串

11 、禁止在数据库中存储明文密码

 

六、 SQL 设计规范

1 、使用预编译语句 prepared statement

只传参数，比传递 SQL 语句更高效，一次解析，多次使用，降低 SQL 注入概率

2 、尽量避免相同语句由于书写格式的不同，而导致多次语法分析

3 、避免隐式转换

会导致索引失效，如 select userid from table where userid= ’ 1234 ’

4 、充分利用前缀索引

必须是最左前缀，不可能同时用到两个范围条件

5 、避免使用存储过程、触发器、 EVENTS 等

让数据库做最擅长的事，降低业务耦合度，为 sacle out 、 shading 留点余地，避开 BUG

6 、避免使用大表的 join

MySQL 最擅长的是单表的主键 / 二级索引查询

Join 消耗较多的内存，产生临时表

7 、避免在数据库中进行数学运算

容易将业务逻辑和 DB 耦合在一起

MySQL 不擅长数学运算和逻辑判断

无法使用索引

8 、拒绝大 SQL ，拆分成小 SQL

充分利用 query cache

充分利用多核 CUP

9 、使用 in 代替 or ， in 的值不超过 1000 个

10 、禁止使用 order by rand()

因为 ORDER BY rand() 会将数据从磁盘中读取，进行排序，会消耗大量的 IO 和 CPU ，可以在程序中获取一个 rand 值，然后通过在从数据库中获取对应的值

11 、使用 union all 而不是 union

12 、程序应有捕获 SQL 异常的处理机制

13 、禁止单条 SQL 语句同时更新多个表

14 、不使用 select * from

消耗 cpu 和 IO 、消耗网络带宽

无法使用覆盖索引

减少表结构变更带来的影响


七、行为规范

1 、批量导入、导出数据必须提前通知 DBA 协助观察；

2 、批量更新数据，如 update,delete 操作，需要 DBA 进行审查，并在执行过程中观察服务负载等各种状况；

3 、禁止在从库上执行后台管理和统计类的功能查询；

4 、禁止有 super 权限的应用程序账号存在；

5 、产品出现非数据库导致的故障时及时通知 DBA 协助排查；

6 、促销活动或上线新功能必须提前通知 DBA 进行流量评估；

7 、数据库数据丢失，及时联系 DBA 进行恢复；

8 、对单表的多次 alter 操作必须合并为一次操作，相同类型的写操作合并为一条语句；

9 、不在 MySQL 数据库中存放业务逻辑；

10 、重大项目的数据库方案选型和设计必须提前通知 DBA 参与；

11 、对特别重要的库表，提前与 DBA 沟通确定维护和备份优先级；

12 、不在业务高峰期批量更新、查询数据库；

13 、 提交线上建表需求，必须详细注明所有相关 SQL 。
